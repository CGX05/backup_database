name: backup_mysql

on: 
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 下载代码
      uses: actions/checkout@v4

    - name: 安装sshpass
      run: sudo apt-get install -y sshpass

    - name: 测试服务器连接
      run: |
        echo "测试连接到阿里云服务器..."
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" \
        ssh -o StrictHostKeyChecking=no \
            -o ConnectTimeout=30 \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          echo '✅ 成功连接到服务器！'
        "
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}

    - name: 在服务器创建应用目录
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" \
        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          mkdir -p /home/my-python-app
          echo '📁 应用目录创建完成：/home/my-python-app'
        "
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}

    - name: 上传代码到服务器
      run: |
        echo "开始上传代码到服务器..."
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" \
        scp -o StrictHostKeyChecking=no \
            -r ./* \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/my-python-app/
        echo '✅ 代码上传完成！'
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}

    - name: 在服务器上部署应用
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" \
        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /home/my-python-app
          echo ' 开始部署流程..'

          # ✅ 1. 创建 .env 文件
          echo '🔐 创建 .env 配置文件...'
          cat > .env << 'EOF'
        # 应用配置
        DEBUG=False
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        API_KEY=${{ secrets.API_KEY }}

          echo '✅ .env 文件创建成功！'

          # 2. 创建虚拟环境
          echo '📁 创建 Python 虚拟环境 (venv)...'
          python3 -m venv venv

          # 3. 激活虚拟环境
          echo '⚡ 激活虚拟环境...'
          source venv/bin/activate

          # 4. 安装项目依赖
          echo '📦 安装 requirements.txt 中的依赖...'
          pip install --upgrade pip
          pip install -r requirements.txt

          # 5. 停止可能已经在运行的旧应用
          echo '⏹️  停止旧应用实例...'
          pkill -f 'python main.py' || echo '没有正在运行的应用或已停止。'

          # 6. 启动应用（后台运行）
          echo '🚀 启动应用...'
          nohup python main.py > app.log 2>&1 &

          # 7. 验证
          echo '🎉 部署完成！'
          echo '📋 进程：'
          ps aux | grep python | grep -v grep
        "
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}

    - name: 部署完成通知
      run: |
        echo '🎉 部署到服务器完成！'
        echo '🌐 服务器IP: ${{ secrets.SERVER_HOST }}'
        echo '📁 应用路径: /home/my-python-app/'
        echo '📄 日志文件: /home/my-python-app/app.log'