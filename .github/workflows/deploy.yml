name: Deploy FastAPI to Alibaba Cloud

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 使用 scp-action 上传代码（这才是正确的上传方式）
      - name: 📤 Upload Code via SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "."  # 上传当前目录所有文件
          target: "/home/ubuntu/myfastapi/source"  # 上传到服务器的临时目录
          rm: true  # 上传前清空目标目录（可选）

      # 3. 在服务器上执行部署命令
      - name: 🛠️ Run Deployment Script
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # 进入项目目录
            cd /home/ubuntu/myfastapi || mkdir -p /home/ubuntu/myfastapi && cd /home/ubuntu/myfastapi

            # 1. 从 source 目录复制代码
            if [ -d "source" ]; then
              cp -r source/* ./ || true
              cp -r source/.* ./ 2>/dev/null || true
              echo "✅ 代码已复制到项目根目录"
            else
              echo "❌ 错误：source 目录不存在！"
              exit 1
            fi

            # 2. 生成 config.env
            cat > config.env << 'EOF'
            MYSQL_PASSWORD=${{ secrets.DATABASE_KEY }}
            EOF
            echo "✅ config.env 已生成"

            # 3. 创建虚拟环境
            if [ ! -d "venv" ]; then
              echo "🔄 创建虚拟环境..."
              python3 -m venv venv
            fi
            source venv/bin/activate

            # 4. 安装依赖
            pip install --upgrade pip
            if [ -f "requirements.txt" ]; then
              echo "📦 安装依赖..."
              pip install -r requirements.txt
            else
              echo "❌ requirements.txt 不存在！"
              exit 1
            fi

            #5.生成systemd服务文件
            sudo tee /etc/systemd/system/fastapi.service > /dev/null << EOF
            [Unit]
            Description=FastAPI app

            [Service]
            Type=simple
            User=root
            WorkingDirectory=/home/ubuntu/myfastapi
            ExecStart=/home/ubuntu/myfastapi/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000
            Restart=always
            RestartSec=5
            EnvironmentFile=/home/ubuntu/myfastapi/config.env
            StandardOutput=journal
            StandardError=journal

            [Install]
            WantedBy=multi-user.target
            EOF
              

            # 6. 重新加载 systemd 配置
            sudo systemctl daemon-reload

            # 7. 停止旧服务（如果正在运行）
            if sudo systemctl is-active --quiet fastapi.service; then
              echo "🛑 停止旧服务..."
              sudo systemctl stop fastapi.service
            fi

            # 8. 启动新服务
            echo "🚀 启动 FastAPI 服务..."
            sudo systemctl start fastapi.service

            # 8. 设置开机自启
            sudo systemctl enable fastapi.service

            # 9. 检查服务状态
            if sudo systemctl is-active --quiet fastapi.service; then
              echo "🎉 部署成功！服务正在运行"
            else
              echo "❌ 服务启动失败，请检查日志：journalctl -u fastapi.service -n 50"
              exit 1
            fi